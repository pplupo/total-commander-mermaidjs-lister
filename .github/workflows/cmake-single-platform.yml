name: Build + Release (MermaidJsWebView)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to create/update release for (e.g. v0.3.0). If empty, uses manual-<sha>."
        required: false
      draft:
        description: "Create release as draft?"
        required: true
        default: "true"
  push:
    branches:
      - main
    tags:
      - "v*"
      - "V*"

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Install tools
        run: |
          choco install ninja -y
          choco install nuget.commandline -y

      - name: Fetch WebView2 SDK (headers + loader DLL)
        run: |
          # Get nuget package
          nuget install Microsoft.Web.WebView2 -Version 1.0.2592.51 -OutputDirectory third_party -ExcludeVersion

          # Flatten to the path CMake includes:
          # third_party\WebView2\build\native\include  (+ x64\WebView2Loader.dll)
          Remove-Item -ErrorAction SilentlyContinue -Recurse -Force third_party\WebView2
          New-Item -ItemType Directory -Force third_party\WebView2\build\native | Out-Null
          Copy-Item -Recurse third_party\Microsoft.Web.WebView2\build\native\include third_party\WebView2\build\native\
          New-Item -ItemType Directory -Force third_party\WebView2\build\native\x64 | Out-Null
          Copy-Item third_party\Microsoft.Web.WebView2\build\native\x64\WebView2Loader.dll third_party\WebView2\build\native\x64\

      - name: MSVC Dev Cmd
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Configure (CMake)
        run: |
          cmake -S . -B build -G Ninja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_RUNTIME_OUTPUT_DIRECTORY="${{ github.workspace }}\dist" `
            -DCMAKE_LIBRARY_OUTPUT_DIRECTORY="${{ github.workspace }}\dist"

      - name: Build
        run: cmake --build build --config Release -v

      - name: Verify build outputs
        run: |
          $plugin = 'MermaidJsWebView.wlx64'
          if (!(Test-Path (Join-Path dist $plugin))) {
            Get-ChildItem -Recurse -File . | Select-Object FullName | Out-String -Width 2000 | Write-Host
            throw "dist\$plugin not found. Build failed or output dir differs."
          }

      - name: Stage package (flat, installable ZIP)
        run: |
          Set-StrictMode -Version Latest
          $stage = Join-Path -Path "package" -ChildPath "MermaidJsWebView"
          Remove-Item -Recurse -Force $stage -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Force $stage | Out-Null

          $plugin = 'MermaidJsWebView.wlx64'
          $built = Join-Path -Path 'dist' -ChildPath $plugin
          if (!(Test-Path $built)) { throw "$built not found" }
          Copy-Item -Force $built $stage\

          $inf = "resources\pluginst.inf"
          if (!(Test-Path $inf)) { throw "$inf not found" }
          Copy-Item -Force $inf $stage\

          if (Test-Path .\mermaidjswebview.ini) {
            Copy-Item -Force .\mermaidjswebview.ini $stage\
          } elseif (Test-Path .\src\mermaidjswebview.ini) {
            Copy-Item -Force .\src\mermaidjswebview.ini $stage\
          } else {
            Write-Host "No mermaidjswebview.ini found; skipping."
          }

          if (Test-Path .\README.md) { Copy-Item -Force .\README.md $stage\ }

          $wv2 = "third_party\WebView2\build\native\x64\WebView2Loader.dll"
          if (!(Test-Path $wv2)) { throw "WebView2Loader.dll not found at $wv2" }
          Copy-Item -Force $wv2 $stage\

          $mermaidSrc = "third_party\mermaidjs"
          if (!(Test-Path $mermaidSrc)) { throw "MermaidJS directory not found at $mermaidSrc" }
          $mermaidDest = Join-Path -Path $stage -ChildPath "mermaidjs"
          Copy-Item -Recurse -Force $mermaidSrc $mermaidDest

          $tarPath = Join-Path -Path $mermaidDest -ChildPath "mermaid-portable-dist.tar"
          if (Test-Path $tarPath) {
            tar -xf $tarPath -C $mermaidDest
            Remove-Item -Force $tarPath
          }

      - name: Create ZIP (no nesting)
        run: |
          Set-StrictMode -Version Latest
          $stage = Join-Path -Path "package" -ChildPath "MermaidJsWebView"
          $out = "MermaidJsWebView.zip"
          Remove-Item -Force $out -ErrorAction SilentlyContinue
          Compress-Archive -Path (Join-Path -Path $stage -ChildPath '*') -DestinationPath $out -Force

          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $zip = [IO.Compression.ZipFile]::OpenRead($out)
          try {
            $entries = $zip.Entries
            $hasInf  = $entries | Where-Object { $_.FullName -ieq 'pluginst.inf' } | Select-Object -First 1
            $nested  = @($entries | Where-Object { $_.FullName -match '\.zip$' } | Select-Object -ExpandProperty FullName)

            if (-not $hasInf) {
              throw "pluginst.inf is not at the root of ${out}"
            }
            if ($nested.Count -gt 0) {
              $list = ($nested -join ', ')
              throw "Nested zip(s) found in ${out}: $list"
            }
          }
          finally {
            $zip.Dispose()
          }


      - name: Determine tag
        id: tag
        run: |
          $tag = ""
          if ("${{ github.event_name }}" -eq "push" -and "${{ github.ref_type }}" -eq "tag") {
            $tag = "${{ github.ref_name }}"
          } elseif ("${{ github.event_name }}" -eq "workflow_dispatch" -and "${{ inputs.tag }}") {
            $tag = "${{ inputs.tag }}"
          } else {
            $sha = "${{ github.sha }}".Substring(0,7)
            $tag = "manual-$sha"
          }
          "tag=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Generate release notes
        id: release_notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $tag = "${{ steps.tag.outputs.tag }}"
          $target = "${{ github.sha }}"
          $headers = @{
            Authorization = "Bearer $env:GITHUB_TOKEN"
            Accept        = "application/vnd.github+json"
            'X-GitHub-Api-Version' = '2022-11-28'
          }
          $payload = @{ tag_name = $tag; target_commitish = $target } | ConvertTo-Json -Compress
          $response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/generate-notes" -Method Post -Headers $headers -Body $payload -ContentType 'application/json'
          $notes = $response.body
          Set-Content -Path release_notes.md -Value $notes
          "path=release_notes.md" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: ${{ steps.tag.outputs.tag }}
          draft: ${{ github.event.inputs.draft || 'true' }}
          files: |
            MermaidJsWebView.zip
          body_path: ${{ steps.release_notes.outputs.path }}
